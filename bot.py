import os
import logging
import time
import pandas as pd
import requests
from io import BytesIO
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler, CallbackQueryHandler
)
import firebase_admin
from firebase_admin import credentials, db
from datetime import datetime, timezone, timedelta
import random
import re
import asyncio

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

firebase_json = os.getenv('FIREBASE_CREDENTIALS_JSON')
if firebase_json:
    try:
        firebase_cred = credentials.Certificate(eval(firebase_json))
        firebase_admin.initialize_app(firebase_cred, {
            'databaseURL': 'https://ag-searh-default-rtdb.firebaseio.com/'
        })
        logging.info("Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase: {e}")
        logging.info("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Firebase")
else:
    logging.warning("FIREBASE_CREDENTIALS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Firebase")

GITHUB_RAW_URL = 'https://github.com/chekoli911/AGSGM_BOT/raw/main/store-8370478-Vse_igri-202507290225_fixed.xlsx'
df = pd.read_excel(BytesIO(requests.get(GITHUB_RAW_URL).content), usecols=['Title', 'Url'])

CHANNEL_CHAT_ID = -1002773793511  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ADMIN_IDS = {5381215134, 6280405854}  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤

ASKING_IF_WANT_NEW = 1
WAITING_FOR_ACCOUNT_DATA = 2

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üè† –ê—Ä–µ–Ω–¥–∞"), KeyboardButton("üõí –ü–æ–∫—É–ø–∫–∞")],
        [KeyboardButton("üìö –ú–æ–∏ –∏–≥—Ä—ã"), KeyboardButton("üéÆ –í–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å?")],
        [KeyboardButton("‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞"), KeyboardButton("üÜï –ù–æ–≤–∏–Ω–∫–∏")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True, is_persistent=True)

def get_search_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã", callback_data="search_game")]
    ])

def get_library_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã", callback_data="completed")],
        [InlineKeyboardButton("üéØ –°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã", callback_data="played")],
        [InlineKeyboardButton("‚ùå –ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã", callback_data="not_interested")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_completed_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéØ –°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã", callback_data="played")],
        [InlineKeyboardButton("‚ùå –ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã", callback_data="not_interested")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_played_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã", callback_data="completed")],
        [InlineKeyboardButton("‚ùå –ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã", callback_data="not_interested")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_not_interested_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéØ –°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã", callback_data="played")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã", callback_data="completed")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_advice_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ï—â–µ —Å–æ–≤–µ—Ç", callback_data="advice")],
        [InlineKeyboardButton("‚úÖ –£–∂–µ –∏–≥—Ä–∞–ª", callback_data="advice_played")],
        [InlineKeyboardButton("üèÜ –£–∂–µ –ø—Ä–æ—à–µ–ª", callback_data="advice_completed")],
        [InlineKeyboardButton("‚ùå –ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data="advice_not_interested")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_new_advice_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ï—â–µ —Å–æ–≤–µ—Ç", callback_data="advice")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_rental_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéÆ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–≥—Ä—É", callback_data="rent_game")],
        [InlineKeyboardButton("üéØ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å PS Plus", callback_data="rent_ps_plus")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É –ø—Ä–æ—Ñ–∏–ª—è", callback_data="extend_rental_profile")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="end_rental")],
        [InlineKeyboardButton("üîê –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ 2FA", callback_data="get_2fa")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_purchase_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéÆ –ö—É–ø–∏—Ç—å –∏–≥—Ä—ã", callback_data="buy_games")],
        [InlineKeyboardButton("üì± –ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_buy_games_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–µ—à–µ–≤–ª–µ", callback_data="buy_cheaper")],
        [InlineKeyboardButton("üíé –ü–æ–ª–Ω–∞—è –ø–æ–∫—É–ø–∫–∞", callback_data="buy_full")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="purchase")]
    ])

def get_buy_full_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞", callback_data="buy_sale")],
        [InlineKeyboardButton("üéØ –ò–≥—Ä–∞ –≤–Ω–µ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏", callback_data="buy_outside_sale")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_games")]
    ])

def get_buy_subscription_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéÆ –ö—É–ø–∏—Ç—å PS Plus", callback_data="buy_ps_plus")],
        [InlineKeyboardButton("üéØ –ö—É–ø–∏—Ç—å EA Play", callback_data="buy_ea_play")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="purchase")]
    ])

def get_end_rental_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚è∞ –ó–∞–∫–æ–Ω—á–∏–ª—Å—è —Å—Ä–æ–∫", callback_data="rental_expired")],
        [InlineKeyboardButton("üì§ –°–¥–∞—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="early_return")],
        [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –∏–≥—Ä—É —Å–æ —Å–∫–∏–¥–∫–æ–π", callback_data="extend_rental")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="rental")]
    ])

def get_console_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéÆ –£ –º–µ–Ω—è PS4", callback_data="ps4_guide")],
        [InlineKeyboardButton("üéÆ –£ –º–µ–Ω—è PS5", callback_data="ps5_guide")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="end_rental")]
    ])

def get_early_return_confirm_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–Ω—è–ª(–∞)", callback_data="early_return_confirm")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="end_rental")]
    ])

advice_texts = [
    "–í–æ—Ç –æ—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ –¥–æ—Å—É–≥–∞:",
    "–ü–æ–ø—Ä–æ–±—É–π —Å—ã–≥—Ä–∞—Ç—å –≤ —ç—Ç—É –∏–≥—Ä—É ‚Äî –æ–Ω–∞ –∫–ª–∞—Å—Å–Ω–∞—è!",
    "–≠—Ç–∞ –∏–≥—Ä–∞ —Ç–æ—á–Ω–æ –Ω–µ —Ä–∞–∑–æ—á–∞—Ä—É–µ—Ç —Ç–µ–±—è:",
    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ ‚Äî –≤–æ—Ç –∏–≥—Ä–∞ –¥–ª—è —Ç–µ–±—è!",
    "–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç—É –∏–≥—Ä—É:",
    "–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è:",
    "–ù–µ –ø—Ä–æ—Ö–æ–¥–∏ –º–∏–º–æ, –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç—É –∏–≥—Ä—É:",
    "–î–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç—É –∏–≥—Ä—É:",
    "–í–æ—Ç –∏–≥—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:",
    "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞:",
    "–≠—Ç–∞ –∏–≥—Ä–∞ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:",
    "–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç, —Ç–æ –≤–æ—Ç –æ–Ω:",
    "–û—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è ‚Äî —ç—Ç–∞ –∏–≥—Ä–∞:",
    "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –∏–≥—Ä—É:",
    "–ü–æ–ø—Ä–æ–±—É–π —ç—Ç—É –∏–≥—Ä—É, –æ–Ω–∞ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:",
    "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç—É –∏–≥—Ä—É:",
    "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç—É –∫–ª–∞—Å—Å–Ω—É—é –∏–≥—Ä—É:",
    "–≠—Ç–∞ –∏–≥—Ä–∞ —Å—Ç–æ–∏—Ç —Ç–≤–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è:"
]

advice_triggers = [
    '—Å–æ–≤–µ—Ç', '–≤–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å', '?', '??', '–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
    '–¥–∞–π —Å–æ–≤–µ—Ç', '—á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å', '–ø–æ—Å–æ–≤–µ—Ç—É–π', '–∏–≥—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'
]

passed_triggers = ['–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ', '–ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ', '–ø—Ä–æ–π–¥–µ–Ω–æ', '–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã']
played_triggers = ['—É–∂–µ –∏–≥—Ä–∞–ª', '—Å—ã–≥—Ä–∞–ª', 'played']
not_interested_triggers = ['–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã']

def add_game_mark(user_id: int, game_title: str, mark_type: str):
    ref = db.reference(f'users/{user_id}/{mark_type}')
    ref.update({game_title: True})

def get_marked_games(user_id: int, mark_type: str):
    ref = db.reference(f'users/{user_id}/{mark_type}')
    data = ref.get()
    return list(data.keys()) if data else []

def log_user_query(user_id: int, username: str, query: str):
    ref = db.reference(f'users/{user_id}/queries')
    now_iso = datetime.now(timezone.utc).isoformat()
    ref.push({
        'query': query,
        'timestamp': now_iso,
        'username': username
    })

def normalize_text(text):
    text = text.lower().strip()
    text = re.sub(r'[?]+', '', text)
    return text

def pick_random_game(exclude_titles=set()):
    available = df[~df['Title'].isin(exclude_titles)]
    if available.empty:
        return None, None
    row = available.sample(1).iloc[0]
    return row['Title'], row['Url']

async def notify_channel(app, text: str):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª
    await app.bot.send_message(chat_id=CHANNEL_CHAT_ID, text=text)

async def notify_admin(app, text: str):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        await app.bot.send_message(chat_id=admin_id, text=text)

async def greet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–≥—Ä—ã –¥–ª—è PlayStation: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å, –∏ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–æ–∫—É–ø–∫—É.\n"
        "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –º–æ–≥—É:\n"
        "üéÆ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –≤–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å\n"
        "üìö –•—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ\n"
        "üÜï –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∏ ‚Äî –∏—Ö –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —É –Ω–∞—Å!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:",
        reply_markup=get_main_keyboard()
    )

async def send_advice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "no_username"
    log_user_query(user_id, username, "requested advice")

    completed_games = set(get_marked_games(user_id, 'completed_games'))
    title, url = pick_random_game(exclude_titles=completed_games)
    if not title:
        if update.callback_query:
            await update.callback_query.edit_message_text("–í—Å–µ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã —É –≤–∞—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã!", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text("–í—Å–µ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã —É –≤–∞—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return ConversationHandler.END

    advice = random.choice(advice_texts)
    context.user_data['last_recommended_game'] = title
    msg = f"{advice}\n{title}\n{url}\n\n–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–π –∏–≥—Ä–µ?"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(msg, reply_markup=get_advice_keyboard())
    else:
        await update.message.reply_text(msg, reply_markup=get_advice_keyboard())
    return ASKING_IF_WANT_NEW

async def passed_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    completed = get_marked_games(user_id, 'completed_games')
    if completed:
        response = "‚úÖ **–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã:**\n\n" + "\n".join(f"‚Ä¢ {game}" for game in completed)
    else:
        response = "–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∏–≥—Ä—ã."
    
    if update.callback_query:
        await update.callback_query.edit_message_text(response, reply_markup=get_completed_keyboard())
    else:
        await update.message.reply_text(response, reply_markup=get_completed_keyboard())

async def played_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    played = get_marked_games(user_id, 'played_games')
    if played:
        response = "üéØ **–°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:**\n\n" + "\n".join(f"‚Ä¢ {game}" for game in played)
    else:
        response = "–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã –∫–∞–∫ —Å—ã–≥—Ä–∞–Ω–Ω–æ–π."
    
    if update.callback_query:
        await update.callback_query.edit_message_text(response, reply_markup=get_played_keyboard())
    else:
        await update.message.reply_text(response, reply_markup=get_played_keyboard())

async def not_interested_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    not_interested = get_marked_games(user_id, 'not_interested_games')
    if not_interested:
        response = "‚ùå **–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã:**\n\n" + "\n".join(f"‚Ä¢ {game}" for game in not_interested)
    else:
        response = "–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é."
    
    if update.callback_query:
        await update.callback_query.edit_message_text(response, reply_markup=get_not_interested_keyboard())
    else:
        await update.message.reply_text(response, reply_markup=get_not_interested_keyboard())

async def whattoplay_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await send_advice(update, context)

async def new_releases_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_25 = df.tail(25)
    messages = [f"{row['Title']}\n{row['Url']}" for _, row in last_25.iterrows()]
    
    if update.callback_query:
        await update.callback_query.edit_message_text("üÜï **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∏:**\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫...")
        for msg in messages:
            await update.callback_query.message.reply_text(msg)
    else:
        for msg in messages:
            await update.message.reply_text(msg)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–≥—Ä—ã –¥–ª—è PlayStation: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å, –∏ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–æ–∫—É–ø–∫—É.\n"
        "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –º–æ–≥—É:\n"
        "üéÆ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –≤–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å\n"
        "üìö –•—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ\n"
        "üÜï –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∏ ‚Äî –∏—Ö –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —É –Ω–∞—Å!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:",
        reply_markup=get_main_keyboard()
    )

async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "üÜï –ù–æ–≤–∏–Ω–∫–∏":
        await new_releases_command(update, context)
    elif text == "üéÆ –í–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å?":
        context.user_data['last_recommended_game'] = None
        await send_advice(update, context)
    elif text == "üìö –ú–æ–∏ –∏–≥—Ä—ã":
        await update.message.reply_text(
            "üìö **–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–≥—Ä**\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_library_keyboard()
        )
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "‚ùì **–ü–æ–º–æ—â—å:**\n\n"
            "üéÆ **–í–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å?** - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–≥—Ä—ã\n"
            "üÜï **–ù–æ–≤–∏–Ω–∫–∏** - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 25 –∏–≥—Ä\n"
            "üìö **–ú–æ–∏ –∏–≥—Ä—ã** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ, —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã\n"
            "üè† **–ê—Ä–µ–Ω–¥–∞** - –∞—Ä–µ–Ω–¥–∞ –∏–≥—Ä, PS Plus, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã\n"
            "üõí **–ü–æ–∫—É–ø–∫–∞** - –∫—É–ø–∏—Ç—å –∏–≥—Ä—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            "‚öôÔ∏è **–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞** - –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
            "‚Ä¢ –û—Ç–º–µ—á–∞–π –∏–≥—Ä—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ '–ê—Ä–µ–Ω–¥–∞' –º–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –∏–≥—Ä—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–º ARENALOVE\n"
            "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–∫—É–ø–∫–∞' –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏–≥—Ä—ã –¥–µ—à–µ–≤–ª–µ –∏–ª–∏ –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
            "üîó **–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
            "‚Ä¢ –ö—É–ø–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞: https://arenapsgm.ru/P2P3\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∞ –ø–æ–∫—É–ø–∫–∏: @StorePSGM\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∞ –∞—Ä–µ–Ω–¥—ã: @ArenaPSGMrent\n"
            "‚Ä¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @ArenaPSGMadmin"
        )
    elif text == "‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞":
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n"
            "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–≥—Ä—ã –¥–ª—è PlayStation: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å, –∏ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–æ–∫—É–ø–∫—É.\n"
            "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –º–æ–≥—É:\n"
            "üéÆ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –≤–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å\n"
            "üìö –•—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ\n"
            "üÜï –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∏ ‚Äî –∏—Ö –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —É –Ω–∞—Å!\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:"
        )
    elif text == "üè† –ê—Ä–µ–Ω–¥–∞":
        await update.message.reply_text(
            "üè† **–ê—Ä–µ–Ω–¥–∞ –∏–≥—Ä**\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_rental_keyboard()
        )
    elif text == "üõí –ü–æ–∫—É–ø–∫–∞":
        await update.message.reply_text(
            "üõí **–ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä**\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_purchase_keyboard()
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –∏–≥—Ä—ã
        await search_game(update, context)

async def search_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "no_username"
    raw_text = update.message.text
    text = normalize_text(raw_text)

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {raw_text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    log_user_query(user_id, username, raw_text.lower())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
    await notify_channel(context.application, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–∞–ø–∏—Å–∞–ª –∑–∞–ø—Ä–æ—Å:\n{raw_text}")

    if text == '–ø–æ–∫–∞':
        await update.message.reply_text(
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –£ –Ω–∞—Å –º–æ–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–≥—Ä—ã, –Ω–æ –∏ –∫—É–ø–∏—Ç—å –∏—Ö –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º.\n"
            "–°–∞–π—Ç - https://arenapsgm.ru/P2P3\n"
            "–ì—Ä—É–ø–ø–∞ - @StorePSGM"
        )
        return ConversationHandler.END

    if text == '–µ—â–µ':
        return await send_advice(update, context)

    account_phrases = [
        "–∫–∞–∫ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
        "–∫–∞–∫ –≤–æ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç",
        "–∫–∞–∫ –∑–∞–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
        "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç",
        "–≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç",
    ]
    if any(phrase in text for phrase in account_phrases):
        await update.message.reply_text(
            "–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ, –≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\nhttp://arenapsgm.ru/vhodps5"
        )
        return ConversationHandler.END

    if text in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä']:
        return await greet(update, context)

    if text in advice_triggers:
        return await send_advice(update, context)

    if text in passed_triggers:
        await passed_command(update, context)
        return ConversationHandler.END

    if text in played_triggers:
        await played_command(update, context)
        return ConversationHandler.END

    last_game = context.user_data.get('last_recommended_game')
    if text in not_interested_triggers and not last_game:
        await not_interested_command(update, context)
        return ConversationHandler.END

    if text == '–Ω–æ–≤–∏–Ω–∫–∏':
        await new_releases_command(update, context)
        return ConversationHandler.END

    if last_game:
        if text == '–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ':
            add_game_mark(user_id, last_game, 'not_interested_games')
            await update.message.reply_text("–ü–æ–Ω—è–ª, –æ—Ç–º–µ—á–∞—é —ç—Ç—É –∏–≥—Ä—É –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é. –í–æ—Ç –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
            return await send_advice(update, context)
        elif text in ['—É–∂–µ –∏–≥—Ä–∞–ª', '–∏–≥—Ä–∞–ª']:
            add_game_mark(user_id, last_game, 'played_games')
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–º–µ—Ç–∏–ª –∫–∞–∫ —Å—ã–≥—Ä–∞–Ω–Ω—É—é. –í–æ—Ç –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
            return await send_advice(update, context)
        elif text == '—É–∂–µ –ø—Ä–æ—à–µ–ª':
            add_game_mark(user_id, last_game, 'completed_games')
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é. –í–æ—Ç –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
            return await send_advice(update, context)

    mark_patterns = {
        'completed_games': ['–ø—Ä–æ–π–¥–µ–Ω–æ', '–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ', '–ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ', '–ø—Ä–æ–π–¥–µ–Ω'],
        'played_games': ['—Å—ã–≥—Ä–∞–ª', '—É–∂–µ –∏–≥—Ä–∞–ª', '–∏–≥—Ä–∞–ª'],
        'not_interested_games': ['–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ']
    }

    for mark_type, keywords in mark_patterns.items():
        for keyword in keywords:
            if text.startswith(keyword):
                game_title = text[len(keyword):].strip()
                if not game_title:
                    await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '{keyword}'.")
                    return ConversationHandler.END

                results = df[df['Title'].str.lower().str.startswith(game_title)]
                if results.empty:
                    await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
                    return ConversationHandler.END

                add_game_mark(user_id, results.iloc[0]['Title'], mark_type)
                await update.message.reply_text(f"–ò–≥—Ä–∞ '{results.iloc[0]['Title']}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ {mark_type.replace('_', ' ')}.")
                return ConversationHandler.END

    if text in ['–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–¥–∞–≤–∞–π']:
        context.user_data['last_recommended_game'] = None
        return await send_advice(update, context)

    if text == '—Å–ø–∞—Å–∏–±–æ':
        await update.message.reply_text(
            "–†–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∏–≥—Ä—É –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ.\n"
            "–í—ã–¥–∞—á–∞ –∏–≥—Ä –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç."
        )
        return ConversationHandler.END

    if text == '–Ω–µ—Ç':
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª. –Ø –±—É–¥—É –∑–¥–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å.")
        return ConversationHandler.END

    results = df[df['Title'].str.lower().str.contains(text, na=False)]
    if results.empty:
        await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return ConversationHandler.END

    for _, row in results.head(25).iterrows():
        await update.message.reply_text(f"{row['Title']}\n{row['Url']}")

    return ConversationHandler.END

# --- –ö–æ–º–∞–Ω–¥–∞ /sendto ---
async def sendto_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendto <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ> [photo_url]")
        return

    try:
        target_user_id = int(args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    message_text = " ".join(args[1:])
    photo_url = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ)
    import re
    url_pattern = r'https?://[^\s]+'
    url_match = re.search(url_pattern, message_text)
    
    if url_match:
        photo_url = url_match.group(0)
        # –£–±–∏—Ä–∞–µ–º URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = re.sub(url_pattern, '', message_text).strip()
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        message_text = re.sub(r'\s+', ' ', message_text)

    try:
        if photo_url:
            await context.application.bot.send_photo(chat_id=target_user_id, photo=photo_url, caption=message_text)
            await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
            await notify_admin(context.application, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –∞–¥–º–∏–Ω–æ–º {user_id}.")
        else:
            await context.application.bot.send_message(chat_id=target_user_id, text=message_text)
            await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
            await notify_admin(context.application, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –∞–¥–º–∏–Ω–æ–º {user_id}.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ /sendtoall ---
async def sendtoall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if len(args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendtoall <—Å–æ–æ–±—â–µ–Ω–∏–µ> [photo_url]")
        return

    message_text = " ".join(args)
    photo_url = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message_text.startswith('http'):
        parts = message_text.split(' ', 1)
        if len(parts) == 2:
            photo_url = parts[0]
            message_text = parts[1]
        else:
            photo_url = message_text
            message_text = ""

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Firebase
        ref = db.reference('users')
        users = ref.get()
        
        if not users:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        sent_count = 0
        failed_count = 0
        
        for user_id_key in users.keys():
            try:
                target_user_id = int(user_id_key)
                if photo_url:
                    await context.application.bot.send_photo(chat_id=target_user_id, photo=photo_url, caption=message_text)
                else:
                    await context.application.bot.send_message(chat_id=target_user_id, text=message_text)
                sent_count += 1
            except Exception as e:
                failed_count += 1
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_key}: {e}")

        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –û—à–∏–±–æ–∫: {failed_count}.")
        await notify_admin(context.application, f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {user_id}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –æ—à–∏–±–æ–∫: {failed_count}.")
        
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ ---
def save_rental_to_firebase(rental_text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–µ–Ω–¥—ã –≤ Firebase —á–µ—Ä–µ–∑ HTTP API (–∫–∞–∫ –≤ HTML)"""
    try:
        # URL –≤–∞—à–µ–π Firebase Realtime Database –∏–∑ HTML
        firebase_url = "https://arenarental-8eb7f-default-rtdb.firebaseio.com"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ HTML)
        data = {
            'text': rental_text,
            'timestamp': int(time.time() * 1000)  # timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –≤ Firebase
        response = requests.post(
            f"{firebase_url}/rentals.json",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            logging.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–µ–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firebase (arenarental-8eb7f)")
            logging.info(f"Firebase –æ—Ç–≤–µ—Ç: {response.json()}")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ Firebase API: {response.status_code} - {response.text}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase: {e}")
        # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            if firebase_json:
                ref = db.reference('rentals')
                ref.push({
                    'text': rental_text,
                    'timestamp': int(time.time() * 1000)
                })
                logging.info("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        except Exception as e2:
            logging.error(f"Fallback —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
def parse_order_info(text):
    """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    order_info = {}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    order_match = re.search(r'–ó–∞–∫–∞–∑ ‚Ññ(\d+)', text)
    if order_match:
        order_info['order_number'] = order_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã - –±–µ—Ä–µ–º –¥–æ —Ü–µ–Ω—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏ (—É—á–∏—Ç—ã–≤–∞—è –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
    line_match = re.search(r'^\s*\d+\.\s*.*$', text, re.MULTILINE)
    if line_match:
        line = line_match.group(0)
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω ": —Ü–∏—Ñ—Ä—ã (" –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        price_match = re.search(r':\s*\d+\s*\(', line)
        if price_match:
            # –ë–µ—Ä–µ–º –≤—Å–µ –¥–æ —Ü–µ–Ω—ã, —É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ
            title_part = line[:price_match.start()].strip()
            title_part = re.sub(r'^\d+\.\s*', '', title_part)
            order_info['game_name'] = title_part
        else:
            # Fallback: –±–µ—Ä–µ–º –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
            title_part = line.split(':')[0].replace(r'^\s*\d+\.', '', count=1).strip()
            order_info['game_name'] = title_part
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–∏
        platform_match = re.search(r'–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞\s*:\s*([^,\n]+)', line, re.IGNORECASE)
        if platform_match:
            order_info['platform'] = platform_match.group(1).strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –¥–Ω–∏
        pos_match = re.search(r'(–ü[23])\s*(\d+)\s*–¥–Ω', line, re.IGNORECASE)
        if pos_match:
            order_info['rental_type'] = pos_match.group(1).upper()
            order_info['days'] = int(pos_match.group(2))
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    name_match = re.search(r'\bName\s*:\s*([^\n\r]+)', text, re.IGNORECASE)
    if name_match:
        order_info['customer_name'] = name_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
    date_match = re.search(r'\bDate\s*:\s*([^\n\r]+)', text, re.IGNORECASE)
    if date_match:
        order_info['order_date'] = date_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    promo_match = re.search(r'–ü—Ä–æ–º–æ–∫–æ–¥:\s+([^\n]+)', text)
    if promo_match:
        order_info['promo_code'] = promo_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∫–∏–¥–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    discount_match = re.search(r'–°–∫–∏–¥–∫–∞:\s+(\d+)', text)
    if discount_match:
        order_info['discount'] = discount_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∏–∫ –≤ Telegram
    telegram_match = re.search(r'–ù–∏–∫_–≤_Telegram_–∏–ª–∏_–í–∫–æ–Ω—Ç–∞–∫—Ç–µ:\s+([^\n]+)', text)
    if telegram_match:
        order_info['telegram_nick'] = telegram_match.group(1).strip()
    
    return order_info

def parse_account_info(text):
    """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    account_info = {}
    
    if not text:
        return account_info
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º "–ê–∫–∫–∞—É–Ω—Ç:" –∏ "–õ–æ—Ç")
    acc_match = re.search(r'–ê–∫–∫–∞—É–Ω—Ç\s*:\s*(\S+)', text, re.IGNORECASE)
    if acc_match:
        account_info['account_number'] = acc_match.group(1)
    else:
        # –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç "–õ–æ—Ç X" –∏–ª–∏ "–õ–û–¢ X"
        lot_match = re.search(r'–õ[–û–æ]—Ç\s*(\d+)', text, re.IGNORECASE)
        if lot_match:
            account_info['account_number'] = f"–õ–û–¢ {lot_match.group(1)}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    if re.search(r'PS5', text, re.IGNORECASE):
        account_info['platform'] = 'PS5'
    elif re.search(r'PS4', text, re.IGNORECASE):
        account_info['platform'] = 'PS4'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º email
    email_match = re.search(r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z–ê-–Ø–∞-—è]{2,}', text)
    if email_match:
        account_info['email'] = email_match.group(0)
        
        # –ò—â–µ–º –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ email
        after_email = text[email_match.end():]
        lines_after = [s.strip() for s in after_email.split('\n') if s.strip()]
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –±–µ–∑ @, –¥–ª–∏–Ω–æ–π >= 4
        for line in lines_after:
            if not re.search(r'\s', line) and '@' not in line and len(line) >= 4:
                account_info['password'] = line
                break
    else:
        # –ï—Å–ª–∏ email –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–∞—Ä–æ–ª—å –≤ –∫–æ–Ω—Ü–µ
        lines = [s.strip() for s in text.split('\n') if s.strip()]
        for line in reversed(lines):
            if not re.search(r'\s', line) and '@' not in line and len(line) >= 4:
                account_info['password'] = line
                break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if '‚úÖ –∞–∫—Ç–∏–≤–∞—Ü–∏—è' in text or '–∞–∫—Ç–∏–≤–∞—Ü–∏—è' in text:
        account_info['activation'] = '‚úÖ'
    
    return account_info

def parse_russian_date(date_str):
    """–ü–∞—Ä—Å–∏—Ç —Ä—É—Å—Å–∫—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy"""
    try:
        match = re.search(r'(\d{1,2})[.\/-](\d{1,2})[.\/-](\d{4})', date_str)
        if match:
            day, month, year = int(match.group(1)), int(match.group(2)), int(match.group(3))
            return datetime(year, month, day)
    except:
        pass
    return None

def calculate_end_date(start_date_str, days):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã (–≤—Å–µ–≥–¥–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)"""
    try:
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã
        start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        
        end_date = start_date + timedelta(days=days)
        return end_date.strftime("%d.%m.%Y")
    except:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def format_order_message(order_info, account_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    customer_name = order_info.get('customer_name', '–ö–ª–∏–µ–Ω—Ç')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º–µ–Ω–∞ (–∫–∞–∫ –≤ HTML –≤–µ—Ä—Å–∏–∏)
    if customer_name == '–ê–ª–µ–∫—Å–µ–π':
        customer_name = '–õ–µ—Ö–∞'
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    game_name = order_info.get('game_name', '–ò–≥—Ä–∞')
    platform = account_info.get('platform') or order_info.get('platform', 'PS5')
    rental_type = order_info.get('rental_type', '–ü3')
    account_number = account_info.get('account_number', '')
    email = account_info.get('email', '')
    password = account_info.get('password', '')
    
    # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1. Dying Light" -> "Dying Light")
    game_name = re.sub(r'^\d+\.\s+', '', game_name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∏–ø –∞—Ä–µ–Ω–¥—ã —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π (‚úÖ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü3)
    rental_with_activation = rental_type
    if rental_type == '–ü3':
        # –î–ª—è –ü3 –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
        if not account_info.get('activation') or account_info.get('activation') == '‚úÖ':
            rental_with_activation += ' ‚úÖ'
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    order_date = order_info.get('order_date', '')
    days = order_info.get('days', 7)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π
    end_date = calculate_end_date(order_date, days)
    
    # –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏ (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 3 —á–∞—Å–∞)
    current_time = (datetime.now() + timedelta(hours=3)).strftime('%H:%M')
    
    message = f"""–õ—é–±–∏–º—ã–π –∫–ª–∏–µ–Ω—Ç: {customer_name}
–ê—Ä–µ–Ω–¥–æ–≤–∞–ª(–∞) –¥–æ {end_date} –≤ {current_time}
"{game_name}", {platform}, {rental_with_activation}
–ó–∞–Ω—è—Ç –∞–∫–∫–∞—É–Ω—Ç ‚Ññ: {account_number}
–ø–æ—á—Ç–∞: {email}
–ø–∞—Ä–æ–ª—å: {password}"""
    
    return message

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_forwarded_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id not in ADMIN_IDS:
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ
    if not update.message.forward_from and not update.message.forward_from_chat:
        return ConversationHandler.END
    
    message_text = update.message.text
    if not message_text:
        await update.message.reply_text("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
    if '–ó–∞–∫–∞–∑ ‚Ññ' in message_text and '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ:' in message_text:
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order_info = parse_order_info(message_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['pending_order'] = order_info
        
        # –ü—Ä–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        await update.message.reply_text("–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
        return WAITING_FOR_ACCOUNT_DATA
    else:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ '–ó–∞–∫–∞–∑ ‚Ññ' –∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ:'.")
        return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ ---
async def handle_account_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id not in ADMIN_IDS:
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–∫–∞–∑
    if 'pending_order' not in context.user_data:
        await update.message.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º.")
        return ConversationHandler.END
    
    message_text = update.message.text
    if not message_text:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        return WAITING_FOR_ACCOUNT_DATA
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    account_info = parse_account_info(message_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not account_info.get('account_number') or not account_info.get('email') or not account_info.get('password'):
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–æ–º–µ—Ä, email, –ø–∞—Ä–æ–ª—å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order_parsing")]
            ])
        )
        return WAITING_FOR_ACCOUNT_DATA
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_info = context.user_data['pending_order']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_message = format_order_message(order_info, account_info)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await update.message.reply_text(final_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Firebase
    save_rental_to_firebase(final_message)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    del context.user_data['pending_order']

    return ConversationHandler.END

# --- –ö–æ–º–∞–Ω–¥–∞ /schedule ---
def convert_utc3_to_unix_timestamp(date_str: str) -> int:
    dt_naive = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
    dt_aware = dt_naive.replace(tzinfo=timezone(timedelta(hours=3)))
    dt_utc = dt_aware.astimezone(timezone.utc)
    return int(dt_utc.timestamp())

async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if len(args) < 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule <user_id> <YYYY-MM-DD> <HH:MM> <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return

    try:
        target_user_id = int(args[0])
        date_part = args[1]
        time_part = args[2]
        date_time_str = f"{date_part} {time_part}"
        send_at_timestamp = convert_utc3_to_unix_timestamp(date_time_str)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return

    message_text = " ".join(args[3:])
    ref = db.reference('scheduled_messages')
    ref.push({
        'target_user_id': target_user_id,
        'message_text': message_text,
        'send_at': send_at_timestamp,
        'status': 'pending'
    })

    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–∞ {date_time_str} –ø–æ UTC+3.")
    await notify_admin(context.application, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∞–¥–º–∏–Ω–æ–º {user_id}.")

# --- –§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def scheduled_messages_worker(app):
    while True:
        try:
            ref = db.reference('scheduled_messages')
            all_messages = ref.order_by_child('status').equal_to('pending').get()
            if all_messages:
                now_ts = int(datetime.now(timezone.utc).timestamp())
                for key, msg_data in all_messages.items():
                    send_at = msg_data.get('send_at', 0)
                    if send_at <= now_ts:
                        target_user_id = msg_data.get('target_user_id')
                        message_text = msg_data.get('message_text')
                        try:
                            await app.bot.send_message(chat_id=target_user_id, text=message_text)
                            ref.child(key).update({'status': 'sent'})
                            logging.info(f"–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                            await notify_admin(app, f"‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await asyncio.sleep(30)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await asyncio.sleep(30)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    if data == "search_game":
        await query.edit_message_text(
            "üîç **–ü–æ–∏—Å–∫ –∏–≥—Ä—ã**\n\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å, –∏ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–æ–∫—É–ø–∫—É.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ God of War\n‚Ä¢ FIFA\n‚Ä¢ Spider-Man",
            reply_markup=get_main_keyboard()
        )
    elif data == "advice":
        context.user_data['last_recommended_game'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        await send_advice(update, context)
    elif data == "new_releases":
        await new_releases_command(update, context)
    elif data == "library":
        await query.edit_message_text(
            "üìö **–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–≥—Ä**\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_library_keyboard()
        )
    elif data == "rental":
        await query.edit_message_text(
            "üè† **–ê—Ä–µ–Ω–¥–∞ –∏–≥—Ä**\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_rental_keyboard()
        )
    elif data == "functions":
        await query.edit_message_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n"
            "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–≥—Ä—ã –¥–ª—è PlayStation: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å, –∏ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–æ–∫—É–ø–∫—É.\n"
            "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –º–æ–≥—É:\n"
            "üéÆ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –≤–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å\n"
            "üìö –•—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ\n"
            "üÜï –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∏ ‚Äî –∏—Ö –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —É –Ω–∞—Å!\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:",
            reply_markup=get_main_keyboard()
        )
    elif data == "help":
        await query.edit_message_text(
            "‚ùì –ü–æ–º–æ—â—å:\n\n"
            "üéÆ **–î–∞—Ç—å —Å–æ–≤–µ—Ç** - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–≥—Ä—ã\n"
            "üÜï **–ù–æ–≤–∏–Ω–∫–∏** - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 25 –∏–≥—Ä\n"
            "üìö **–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ, —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
            "‚Ä¢ –û—Ç–º–µ—á–∞–π –∏–≥—Ä—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üîó **–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
            "‚Ä¢ –°–∞–π—Ç: https://arenapsgm.ru/P2P3\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∞: @StorePSGM",
            reply_markup=get_main_keyboard()
        )
    elif data == "completed":
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä (–∫–∞–∫ /passed)
        await passed_command(update, context)
    elif data == "played":
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä (–∫–∞–∫ /played)
        await played_command(update, context)
    elif data == "not_interested":
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–≥—Ä (–∫–∞–∫ /notinterested)
        await not_interested_command(update, context)
    elif data == "back_to_main":
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:"
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    elif data == "advice_played" and context.user_data.get('last_recommended_game'):
        # –û—Ç–º–µ—Ç–∏—Ç—å –∏–≥—Ä—É –∫–∞–∫ —Å—ã–≥—Ä–∞–Ω–Ω—É—é –∏ –¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        last_game = context.user_data.get('last_recommended_game')
        add_game_mark(user_id, last_game, 'played_games')
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–º–µ—Ç–∏–ª –∫–∞–∫ —Å—ã–≥—Ä–∞–Ω–Ω—É—é. –í–æ—Ç –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", reply_markup=get_new_advice_keyboard())
        context.user_data['last_recommended_game'] = None
        await send_advice(update, context)
    elif data == "advice_completed" and context.user_data.get('last_recommended_game'):
        # –û—Ç–º–µ—Ç–∏—Ç—å –∏–≥—Ä—É –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é –∏ –¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        last_game = context.user_data.get('last_recommended_game')
        add_game_mark(user_id, last_game, 'completed_games')
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é. –í–æ—Ç –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", reply_markup=get_new_advice_keyboard())
        context.user_data['last_recommended_game'] = None
        await send_advice(update, context)
    elif data == "advice_not_interested" and context.user_data.get('last_recommended_game'):
        # –û—Ç–º–µ—Ç–∏—Ç—å –∏–≥—Ä—É –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏ –¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        last_game = context.user_data.get('last_recommended_game')
        add_game_mark(user_id, last_game, 'not_interested_games')
        await query.edit_message_text("–ü–æ–Ω—è–ª, –æ—Ç–º–µ—á–∞—é –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é. –í–æ—Ç –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", reply_markup=get_new_advice_keyboard())
        context.user_data['last_recommended_game'] = None
        await send_advice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞—Ä–µ–Ω–¥—ã
    elif data == "rent_game":
        await query.edit_message_text(
            "üéÆ **–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–≥—Ä—É**\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å –∏ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É. "
            "–ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –∏ –ø–æ–∑–∏—Ü–∏—é, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –ø–µ—Ä–µ–¥–∞–º —á–µ–∫ –∞–¥–º–∏–Ω—É –∏ –æ–Ω –≤—Å—ë –ø—Ä–∏—à–ª—ë—Ç.\n\n"
            "–¢–∞–∫–∂–µ –≤—Å–µ –∏–≥—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ https://arenapsgm.ru/",
            reply_markup=get_rental_keyboard()
        )
    elif data == "rent_ps_plus":
        await query.edit_message_text(
            "üéØ **–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å PS Plus**\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞—Ä–µ–Ω–¥—ã PS Plus:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéÆ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å PS Plus", url="https://arenapsgm.ru/playstationplus/tproduct/199915107972-arenda-ps-plus-ps4ps5")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="rental")]
            ])
        )
    elif data == "extend_rental_profile":
        await query.edit_message_text(
            "‚úÖ **–ü—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
            "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–º–æ–∫–æ–¥: `ARENALOVE`\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å:",
            reply_markup=get_rental_keyboard()
        )
    elif data == "end_rental":
        await query.edit_message_text(
            "‚úÖ **–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É**\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=get_end_rental_keyboard()
        )
    elif data == "get_2fa":
        await query.edit_message_text(
            "üîê **–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ 2FA**\n\n"
            "–°–µ–π—á–∞—Å —è —ç—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ —É–º–µ—é, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å! –°–ø—Ä–æ—Å–∏ –∫–æ–¥ —É @ArenaPSGMadmin",
            reply_markup=get_rental_keyboard()
        )
    elif data == "rental_expired":
        await query.edit_message_text(
            "üìå **–í–∞–∂–Ω–æ!** –ï—Å–ª–∏ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤—ã –≤–∏–¥–∏—Ç–µ QR-–∫–æ–¥ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –≤ —Å–µ—Ç—å ‚Äì —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª–∏ –æ—Ñ–ª–∞–π–Ω.\n\n"
            "‚úÖ –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, –∞ –ø–æ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
            "‚ùå –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äì —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º —Å —Å–∏—Å—Ç–µ–º–æ–π –∏ –∫–æ–Ω—Å–æ–ª—å—é!\n\n"
            "**–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–∞—Ç—å –∏–≥—Ä—É?**",
            reply_markup=get_console_keyboard()
        )
    elif data == "early_return":
        await query.edit_message_text(
            "üì§ **–°–¥–∞—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ**\n\n"
            "–ó–∞ –¥–æ—Å—Ä–æ—á–Ω—É—é —Å–¥–∞—á—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å–∫–∏–¥–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É –æ–∫–æ–ª–æ 30%\n"
            "‚Ä¢ –°–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏\n"
            "‚Ä¢ –°–∫–∏–¥–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—à–µ–≤–ª–µ 290‚ÇΩ\n"
            "‚Ä¢ –°–∫–∏–¥–∫–∞ –∏–¥—ë—Ç –æ—Ç 14 –¥–Ω–µ–π\n"
            "‚Ä¢ –°–∫–∏–¥–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–∏–¥–∫—É –∏ –Ω–∞ –Ω–æ–≤–∏–Ω–∫–∏ –ø–µ—Ä–≤—ã–µ 2-3 –º–µ—Å—è—Ü–∞\n\n"
            "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É –∑–∞ –¥–æ—Å—Ä–æ—á–Ω—É—é —Å–¥–∞—á—É –ø—Ä–æ—Å–∏ —É @ArenaPSGMadmin",
            reply_markup=get_early_return_confirm_keyboard()
        )
    elif data == "early_return_confirm":
        await query.edit_message_text(
            "**–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–∞—Ç—å –∏–≥—Ä—É?**",
            reply_markup=get_console_keyboard()
        )
    elif data == "extend_rental":
        await query.edit_message_text(
            "üí≥ **–ü—Ä–æ–¥–ª–∏—Ç—å –∏–≥—Ä—É —Å–æ —Å–∫–∏–¥–∫–æ–π**\n\n"
            "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–≥—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–º–æ–∫–æ–¥: `ARENALOVE`\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å:",
            reply_markup=get_rental_keyboard()
        )
    elif data == "ps4_guide":
        await query.edit_message_text(
            "üéÆ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è PS4:**\n\n"
            "‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é ‚Üí –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ PS4\n"
            "‚Ä¢ –ù–∞–∂–∏–º–∞–µ—Ç–µ \"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\"\n\n"
            "–ü–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—É @ArenaPSGMadmin\n"
            "–ó–∞ —ç—Ç–æ —É–≤–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ—Å–ø–µ–∫—Ç ü´°",
            reply_markup=get_console_keyboard()
        )
    elif data == "ps5_guide":
        await query.edit_message_text(
            "üéÆ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è PS5:**\n\n"
            "‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —É—á—ë—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ‚Üí –î—Ä—É–≥–æ–µ ‚Üí –û–±—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Å–æ–ª–∏ –∏ –æ—Ñ–ª–∞–π–Ω-–∏–≥—Ä–∞\n"
            "‚Ä¢ –ù–∞–∂–∏–º–∞–µ—Ç–µ \"–û—Ç–∫–ª—é—á–∏—Ç—å\"\n\n"
            "–ü–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω—É @ArenaPSGMadmin\n"
            "–ó–∞ —ç—Ç–æ —É–≤–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ—Å–ø–µ–∫—Ç ü´°",
            reply_markup=get_console_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    elif data == "purchase":
        await query.edit_message_text(
            "üõí **–ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä**\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_purchase_keyboard()
        )
    elif data == "buy_games":
        await query.edit_message_text(
            "üéÆ **–ö—É–ø–∏—Ç—å –∏–≥—Ä—ã**\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=get_buy_games_keyboard()
        )
    elif data == "buy_cheaper":
        await query.edit_message_text(
            "üí∞ **–ö—É–ø–∏—Ç—å –¥–µ—à–µ–≤–ª–µ**\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–µ—à–µ–≤–ª–µ", url="https://arenapsgm.ru/P2P3")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_games")]
            ])
        )
    elif data == "buy_full":
        await query.edit_message_text(
            "üíé **–ü–æ–ª–Ω–∞—è –ø–æ–∫—É–ø–∫–∞**\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
            reply_markup=get_buy_full_keyboard()
        )
    elif data == "buy_sale":
        await query.edit_message_text(
            "üî• **–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞**\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä —Å–æ —Å–∫–∏–¥–∫–∞–º–∏:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üî• –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞", url="https://arenapsgm.ru/whattobuysale")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_full")]
            ])
        )
    elif data == "buy_outside_sale":
        await query.edit_message_text(
            "üéØ **–ò–≥—Ä–∞ –≤–Ω–µ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏**\n\n"
            "–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/ArenaPSGMadmin")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_full")]
            ])
        )
    elif data == "buy_subscription":
        await query.edit_message_text(
            "üì± **–ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É**\n\n–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=get_buy_subscription_keyboard()
        )
    elif data == "buy_ps_plus":
        await query.edit_message_text(
            "üéÆ **–ö—É–ø–∏—Ç—å PS Plus**\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ PS Plus:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéÆ –ö—É–ø–∏—Ç—å PS Plus", url="https://arenapsgm.ru/playstationplus")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_subscription")]
            ])
        )
    elif data == "buy_ea_play":
        await query.edit_message_text(
            "üéØ **–ö—É–ø–∏—Ç—å EA Play**\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ EA Play:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéØ –ö—É–ø–∏—Ç—å EA Play", url="https://arenapsgm.ru/eaplay")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_subscription")]
            ])
        )
    elif data == "cancel_order_parsing":
        # –û—Ç–º–µ–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        if 'pending_order' in context.user_data:
            del context.user_data['pending_order']
        
        await query.edit_message_text(
            "‚ùå **–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
            "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

async def on_startup(app):
    app.create_task(scheduled_messages_worker(app))

if __name__ == '__main__':
    TOKEN = os.getenv('BOT_TOKEN')

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.FORWARDED, handle_forwarded_message),
            MessageHandler(filters.TEXT & (~filters.COMMAND) & (~filters.FORWARDED), handle_button_press)
        ],
        states={
            ASKING_IF_WANT_NEW: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_button_press)],
            WAITING_FOR_ACCOUNT_DATA: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_account_data)],
        },
        fallbacks=[]
    )

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('greet', greet))
    app.add_handler(CommandHandler('passed', passed_command))
    app.add_handler(CommandHandler('played', played_command))
    app.add_handler(CommandHandler('notinterested', not_interested_command))
    app.add_handler(CommandHandler('whattoplay', whattoplay_command))
    app.add_handler(CommandHandler('newreleases', new_releases_command))
    app.add_handler(CommandHandler('sendto', sendto_command))
    app.add_handler(CommandHandler('sendtoall', sendtoall_command))
    app.add_handler(CommandHandler('schedule', schedule_command))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(conv_handler)

    app.post_init = on_startup

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
