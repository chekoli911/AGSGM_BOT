import os
import logging
import pandas as pd
import requests
from io import BytesIO
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)
import firebase_admin
from firebase_admin import credentials, db
from datetime import datetime, timezone, timedelta
import random
import re
import asyncio

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

firebase_json = os.getenv('FIREBASE_CREDENTIALS_JSON')
if not firebase_json:
    raise RuntimeError("FIREBASE_CREDENTIALS_JSON env var is missing")

firebase_cred = credentials.Certificate(eval(firebase_json))
firebase_admin.initialize_app(firebase_cred, {
    'databaseURL': 'https://ag-searh-default-rtdb.firebaseio.com/'
})

GITHUB_RAW_URL = 'https://github.com/chekoli911/AGSGM_BOT/raw/main/store-8370478-Vse_igri-202507290225_fixed.xlsx'
df = pd.read_excel(BytesIO(requests.get(GITHUB_RAW_URL).content), usecols=['Title', 'Url'])

CHANNEL_CHAT_ID = -1002773793511  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ADMIN_IDS = {5381215134}  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤

ASKING_IF_WANT_NEW = 1

advice_texts = [
    "–í–æ—Ç –æ—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ –¥–æ—Å—É–≥–∞:",
    "–ü–æ–ø—Ä–æ–±—É–π —Å—ã–≥—Ä–∞—Ç—å –≤ —ç—Ç—É –∏–≥—Ä—É ‚Äî –æ–Ω–∞ –∫–ª–∞—Å—Å–Ω–∞—è!",
    "–≠—Ç–∞ –∏–≥—Ä–∞ —Ç–æ—á–Ω–æ –Ω–µ —Ä–∞–∑–æ—á–∞—Ä—É–µ—Ç —Ç–µ–±—è:",
    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ ‚Äî –≤–æ—Ç –∏–≥—Ä–∞ –¥–ª—è —Ç–µ–±—è!",
    "–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç—É –∏–≥—Ä—É:",
    "–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è:",
    "–ù–µ –ø—Ä–æ—Ö–æ–¥–∏ –º–∏–º–æ, –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç—É –∏–≥—Ä—É:",
    "–î–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç—É –∏–≥—Ä—É:",
    "–í–æ—Ç –∏–≥—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:",
    "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞:",
    "–≠—Ç–∞ –∏–≥—Ä–∞ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:",
    "–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç, —Ç–æ –≤–æ—Ç –æ–Ω:",
    "–û—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è ‚Äî —ç—Ç–∞ –∏–≥—Ä–∞:",
    "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –∏–≥—Ä—É:",
    "–ü–æ–ø—Ä–æ–±—É–π —ç—Ç—É –∏–≥—Ä—É, –æ–Ω–∞ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:",
    "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç—É –∏–≥—Ä—É:",
    "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç—É –∫–ª–∞—Å—Å–Ω—É—é –∏–≥—Ä—É:",
    "–≠—Ç–∞ –∏–≥—Ä–∞ —Å—Ç–æ–∏—Ç —Ç–≤–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è:"
]

advice_triggers = [
    '—Å–æ–≤–µ—Ç', '–≤–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å', '?', '??', '–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
    '–¥–∞–π —Å–æ–≤–µ—Ç', '—á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å', '–ø–æ—Å–æ–≤–µ—Ç—É–π', '–∏–≥—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'
]

passed_triggers = ['–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ', '–ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ', '–ø—Ä–æ–π–¥–µ–Ω–æ', '–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã']
played_triggers = ['—É–∂–µ –∏–≥—Ä–∞–ª', '—Å—ã–≥—Ä–∞–ª', 'played']
not_interested_triggers = ['–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã']

def add_game_mark(user_id: int, game_title: str, mark_type: str):
    ref = db.reference(f'users/{user_id}/{mark_type}')
    ref.update({game_title: True})

def get_marked_games(user_id: int, mark_type: str):
    ref = db.reference(f'users/{user_id}/{mark_type}')
    data = ref.get()
    return list(data.keys()) if data else []

def log_user_query(user_id: int, username: str, query: str):
    ref = db.reference(f'users/{user_id}/queries')
    now_iso = datetime.now(timezone.utc).isoformat()
    ref.push({
        'query': query,
        'timestamp': now_iso,
        'username': username
    })

def normalize_text(text):
    text = text.lower().strip()
    text = re.sub(r'[?]+', '', text)
    return text

def pick_random_game(exclude_titles=set()):
    available = df[~df['Title'].isin(exclude_titles)]
    if available.empty:
        return None, None
    row = available.sample(1).iloc[0]
    return row['Title'], row['Url']

async def notify_channel(app, text: str):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª
    await app.bot.send_message(chat_id=CHANNEL_CHAT_ID, text=text)

async def notify_admin(app, text: str):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        await app.bot.send_message(chat_id=admin_id, text=text)

async def greet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–≥—Ä—ã –¥–ª—è PlayStation: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å, –∏ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–æ–∫—É–ø–∫—É.\n"
        "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –º–æ–≥—É:\n"
        "üéÆ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –≤–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–°–æ–≤–µ—Ç¬ª –∏–ª–∏ ¬´–í–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å?¬ª\n"
        "üìö –•—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ\n"
        "üÜï –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∏ ‚Äî –∏—Ö –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —É –Ω–∞—Å!\n\n"
        "–ü–∏—à–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å ‚Äî —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–≥—Ä—É!"
    )

async def send_advice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "no_username"
    log_user_query(user_id, username, "requested advice")

    completed_games = set(get_marked_games(user_id, 'completed_games'))
    title, url = pick_random_game(exclude_titles=completed_games)
    if not title:
        await update.message.reply_text("–í—Å–µ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã —É –≤–∞—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return ConversationHandler.END

    advice = random.choice(advice_texts)
    context.user_data['last_recommended_game'] = title
    msg = (f"{advice}\n{title}\n{url}\n\n"
           '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏ "–ï—â–µ".\n\n'
           '"–ò–≥—Ä–∞–ª",\n'
           '"–£–∂–µ –ø—Ä–æ—à–µ–ª",\n'
           '"–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ" ‚Äî —è —ç—Ç–æ –∑–∞–ø–æ–º–Ω—é –∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ "–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ" –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ —Ç–≤–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞.\n\n'
           '–ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç, –Ω–∞–ø–∏—à–∏ "–°–ø–∞—Å–∏–±–æ".\n\n'
           '–ï—Å–ª–∏ –ø–æ—Ä–∞ –ø—Ä–æ—â–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ "–ü–æ–∫–∞".')
    await update.message.reply_text(msg)
    return ASKING_IF_WANT_NEW

async def passed_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    completed = get_marked_games(user_id, 'completed_games')
    if completed:
        response = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä:\n" + "\n".join(completed)
    else:
        response = "–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∏–≥—Ä—ã."
    await update.message.reply_text(response)

async def played_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    played = get_marked_games(user_id, 'played_games')
    if played:
        response = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏:\n" + "\n".join(played)
    else:
        response = "–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã –∫–∞–∫ —Å—ã–≥—Ä–∞–Ω–Ω–æ–π."
    await update.message.reply_text(response)

async def not_interested_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    not_interested = get_marked_games(user_id, 'not_interested_games')
    if not_interested:
        response = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ:\n" + "\n".join(not_interested)
    else:
        response = "–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é."
    await update.message.reply_text(response)

async def whattoplay_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await send_advice(update, context)

async def new_releases_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_25 = df.tail(25)
    messages = [f"{row['Title']}\n{row['Url']}" for _, row in last_25.iterrows()]
    for msg in messages:
        await update.message.reply_text(msg)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–≥—Ä—ã –¥–ª—è PlayStation: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å, –∏ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–æ–∫—É–ø–∫—É.\n"
        "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –º–æ–≥—É:\n"
        "üéÆ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –≤–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–°–æ–≤–µ—Ç¬ª –∏–ª–∏ ¬´–í–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å?¬ª\n"
        "üìö –•—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ\n"
        "üÜï –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∏ ‚Äî –∏—Ö –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —É –Ω–∞—Å! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–ù–æ–≤–∏–Ω–∫–∏¬ª\n\n"
        "–ü–∏—à–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å ‚Äî —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–≥—Ä—É!"
    )

async def search_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "no_username"
    raw_text = update.message.text
    text = normalize_text(raw_text)

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {raw_text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    log_user_query(user_id, username, raw_text.lower())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
    await notify_channel(context.application, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–∞–ø–∏—Å–∞–ª –∑–∞–ø—Ä–æ—Å:\n{raw_text}")

    if text == '–ø–æ–∫–∞':
        await update.message.reply_text(
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –£ –Ω–∞—Å –º–æ–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–≥—Ä—ã, –Ω–æ –∏ –∫—É–ø–∏—Ç—å –∏—Ö –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º.\n"
            "–°–∞–π—Ç - https://arenapsgm.ru/P2P3\n"
            "–ì—Ä—É–ø–ø–∞ - @StorePSGM"
        )
        return ConversationHandler.END

    if text == '–µ—â–µ':
        return await send_advice(update, context)

    account_phrases = [
        "–∫–∞–∫ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
        "–∫–∞–∫ –≤–æ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç",
        "–∫–∞–∫ –∑–∞–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
        "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç",
        "–≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç",
    ]
    if any(phrase in text for phrase in account_phrases):
        await update.message.reply_text(
            "–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ, –≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\nhttp://arenapsgm.ru/vhodps5"
        )
        return ConversationHandler.END

    if text in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä']:
        return await greet(update, context)

    if text in advice_triggers:
        return await send_advice(update, context)

    if text in passed_triggers:
        await passed_command(update, context)
        return ConversationHandler.END

    if text in played_triggers:
        await played_command(update, context)
        return ConversationHandler.END

    last_game = context.user_data.get('last_recommended_game')
    if text in not_interested_triggers and not last_game:
        await not_interested_command(update, context)
        return ConversationHandler.END

    if text == '–Ω–æ–≤–∏–Ω–∫–∏':
        await new_releases_command(update, context)
        return ConversationHandler.END

    if last_game:
        if text == '–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ':
            add_game_mark(user_id, last_game, 'not_interested_games')
            await update.message.reply_text("–ü–æ–Ω—è–ª, –æ—Ç–º–µ—á–∞—é —ç—Ç—É –∏–≥—Ä—É –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é. –í–æ—Ç –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
            return await send_advice(update, context)
        elif text in ['—É–∂–µ –∏–≥—Ä–∞–ª', '–∏–≥—Ä–∞–ª']:
            add_game_mark(user_id, last_game, 'played_games')
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–º–µ—Ç–∏–ª –∫–∞–∫ —Å—ã–≥—Ä–∞–Ω–Ω—É—é. –í–æ—Ç –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
            return await send_advice(update, context)
        elif text == '—É–∂–µ –ø—Ä–æ—à–µ–ª':
            add_game_mark(user_id, last_game, 'completed_games')
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é. –í–æ—Ç –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
            return await send_advice(update, context)

    mark_patterns = {
        'completed_games': ['–ø—Ä–æ–π–¥–µ–Ω–æ', '–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ', '–ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ', '–ø—Ä–æ–π–¥–µ–Ω'],
        'played_games': ['—Å—ã–≥—Ä–∞–ª', '—É–∂–µ –∏–≥—Ä–∞–ª', '–∏–≥—Ä–∞–ª'],
        'not_interested_games': ['–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ']
    }

    for mark_type, keywords in mark_patterns.items():
        for keyword in keywords:
            if text.startswith(keyword):
                game_title = text[len(keyword):].strip()
                if not game_title:
                    await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '{keyword}'.")
                    return ConversationHandler.END

                results = df[df['Title'].str.lower().str.startswith(game_title)]
                if results.empty:
                    await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
                    return ConversationHandler.END

                add_game_mark(user_id, results.iloc[0]['Title'], mark_type)
                await update.message.reply_text(f"–ò–≥—Ä–∞ '{results.iloc[0]['Title']}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ {mark_type.replace('_', ' ')}.")
                return ConversationHandler.END

    if text in ['–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–¥–∞–≤–∞–π']:
        context.user_data['last_recommended_game'] = None
        return await send_advice(update, context)

    if text == '—Å–ø–∞—Å–∏–±–æ':
        await update.message.reply_text(
            "–†–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∏–≥—Ä—É –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ.\n"
            "–í—ã–¥–∞—á–∞ –∏–≥—Ä –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç."
        )
        return ConversationHandler.END

    if text == '–Ω–µ—Ç':
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª. –Ø –±—É–¥—É –∑–¥–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å.")
        return ConversationHandler.END

    results = df[df['Title'].str.lower().str.contains(text, na=False)]
    if results.empty:
        await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return ConversationHandler.END

    for _, row in results.head(25).iterrows():
        await update.message.reply_text(f"{row['Title']}\n{row['Url']}")

    return ConversationHandler.END

# --- –ö–æ–º–∞–Ω–¥–∞ /sendto ---
async def sendto_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendto <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    try:
        target_user_id = int(args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    message_text = " ".join(args[1:])
    try:
        await context.application.bot.send_message(chat_id=target_user_id, text=message_text)
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
        await notify_admin(context.application, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –∞–¥–º–∏–Ω–æ–º {user_id}.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ /schedule ---
def convert_utc3_to_unix_timestamp(date_str: str) -> int:
    dt_naive = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
    dt_aware = dt_naive.replace(tzinfo=timezone(timedelta(hours=3)))
    dt_utc = dt_aware.astimezone(timezone.utc)
    return int(dt_utc.timestamp())

async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if len(args) < 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule <user_id> <YYYY-MM-DD> <HH:MM> <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return

    try:
        target_user_id = int(args[0])
        date_part = args[1]
        time_part = args[2]
        date_time_str = f"{date_part} {time_part}"
        send_at_timestamp = convert_utc3_to_unix_timestamp(date_time_str)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return

    message_text = " ".join(args[3:])
    ref = db.reference('scheduled_messages')
    ref.push({
        'target_user_id': target_user_id,
        'message_text': message_text,
        'send_at': send_at_timestamp,
        'status': 'pending'
    })

    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–∞ {date_time_str} –ø–æ UTC+3.")
    await notify_admin(context.application, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∞–¥–º–∏–Ω–æ–º {user_id}.")

# --- –§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def scheduled_messages_worker(app):
    while True:
        try:
            ref = db.reference('scheduled_messages')
            all_messages = ref.order_by_child('status').equal_to('pending').get()
            if all_messages:
                now_ts = int(datetime.now(timezone.utc).timestamp())
                for key, msg_data in all_messages.items():
                    send_at = msg_data.get('send_at', 0)
                    if send_at <= now_ts:
                        target_user_id = msg_data.get('target_user_id')
                        message_text = msg_data.get('message_text')
                        try:
                            await app.bot.send_message(chat_id=target_user_id, text=message_text)
                            ref.child(key).update({'status': 'sent'})
                            logging.info(f"–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                            await notify_admin(app, f"‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await asyncio.sleep(30)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await asyncio.sleep(30)

async def on_startup(app):
    app.create_task(scheduled_messages_worker(app))

if __name__ == '__main__':
    TOKEN = os.getenv('BOT_TOKEN')

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & (~filters.COMMAND), search_game)],
        states={
            ASKING_IF_WANT_NEW: [MessageHandler(filters.TEXT & (~filters.COMMAND), search_game)],
        },
        fallbacks=[]
    )

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('greet', greet))
    app.add_handler(CommandHandler('passed', passed_command))
    app.add_handler(CommandHandler('played', played_command))
    app.add_handler(CommandHandler('notinterested', not_interested_command))
    app.add_handler(CommandHandler('whattoplay', whattoplay_command))
    app.add_handler(CommandHandler('newreleases', new_releases_command))
    app.add_handler(CommandHandler('sendto', sendto_command))
    app.add_handler(CommandHandler('schedule', schedule_command))
    app.add_handler(conv_handler)

    app.post_init = on_startup

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
